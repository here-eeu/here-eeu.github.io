{"version":3,"sources":["assets/js/apikey.js","components/Map.js","components/Panel.js","components/App.js","index.js"],"names":["apikey","Map","state","map","hoveredObject","platform","window","H","service","Platform","defaultLayers","createDefaultLayers","document","getElementById","vector","normal","center","lat","lng","zoom","pixelRatio","devicePixelRatio","ui","mapevents","Behavior","MapEvents","UI","createDefault","getXYZService","token","hospitalsSpaceProvider","xyz","Provider","medWarehousesSpaceProvider","hospitalsLayer","layer","TileLayer","medWarehousesLayer","style","getStyle","style_wh","setProperty","setInteractive","infoBubble","InfoBubble","addClass","close","addBubble","addEventListener","evt","console","log","target","getData","pos","screenToGeo","currentPointer","viewportX","viewportY","setPosition","setContent","properties","open","addLayer","getViewPort","resize","e","coord","items","push","util","ContextItem","label","Math","abs","toFixed","join","callback","setCenter","SEPARATOR","props","updateWaypoints","calculateRoute","clearWaypoints","calculateIsoline","updateMarker","clearIsoline","this","setState","dispose","linestring","routeOutline","Polyline","lineWidth","strokeColor","lineTailCap","lineHeadCap","routeArrows","fillColor","lineDash","routeLine","Group","addObjects","removeObjects","getObjects","show_patients_layer","reqFinished","stats","covid_patients","has_free_beds_features","forEach","feature","addObject","Circle","geometry","coordinates","no_free_beds_features","show_machines_layer","lungs_ventilation_machines","lungs_machines_greater_10_features","lungs_machines_lower_5_features","lungs_machines_lower_10_features","show_equipment_layer","medical_masks","covirus_masks_share_features","covirus_masks_few_features","covirus_masks_enough_features","setZIndex","show_test_kits_layer","covid_test_kits","covirus_tests_share_features","covirus_tests_few_features","covirus_tests_enough_features","waypoints","Marker","route","length","lineString","geo","LineString","pushPoint","styleRoute","isoline","geofence","coords","split","Number","polygon","Polygon","marker","err","id","height","width","Component","Panel","className","marginTop","Container","Row","Col","total_patients","total_beds","color","has_free_beds","no_free_beds","Button","float","onClick","changeLayerSelection","total_lungs_machines","lungs_machines_lower_5","lungs_machines_lower_10","lungs_machines_greater_10","covirus_masks_few","covirus_masks_enough","covirus_masks_share","covirus_tests_few","covirus_tests_enough","covirus_tests_share","placeholder","value","searchText","onChange","onChangeSearch","currentTarget","undefined","suggestions","result","i","key","geocode","locationId","App","bind","axios","get","then","res","reducer","accumulator","currentValue","patients","data","features","filter","covirus_patients","total_covid_patients","reduce","beds","lungs_machines","covirus_tests","result_json","isolineRequest","response","component","shape","error","geocoderUrl","Response","View","Result","Location","DisplayPosition","Latitude","Longitude","setZoom","geocoderResults","geoUrl","waypointsToString","waypointsRequest","routeToString","results","point","routeRequest","routeRes","polylineArray","waypoint","ReactDOM","render"],"mappings":"4TAAaA,EAAS,8CCITC,EAAb,2MAGIC,MAAQ,CACJC,IAAK,MAJb,mFAO0B,IAuEdC,EAvEa,OACXC,EAAW,IAAIC,OAAOC,EAAEC,QAAQC,SAAS,CAC3CT,OAAQA,IAGNU,EAAgBL,EAASM,sBAEzBR,EAAM,IAAIG,OAAOC,EAAEN,IACzBW,SAASC,eAAe,OACxBH,EAAcI,OAAOC,OAAOZ,IACxB,CACIa,OAAQ,CAAEC,IAAK,kBAAmBC,IAAK,iBACvCC,KAAM,EACNC,WAAYd,OAAOe,kBAAoB,IAKzCC,GADW,IAAIhB,OAAOC,EAAEgB,UAAUC,SAAS,IAAIlB,OAAOC,EAAEgB,UAAUE,UAAUtB,IACvEG,OAAOC,EAAEe,GAAGI,GAAGC,cAAcxB,EAAKO,IAyBvCF,EAAUH,EAASuB,cAAc,CACrCC,MAAO,4BAIHC,EAAyB,IAAIxB,OAAOC,EAAEC,QAAQuB,IAAIC,SAASxB,EAAS,YACpEyB,EAA6B,IAAI3B,OAAOC,EAAEC,QAAQuB,IAAIC,SAASxB,EAAS,YAGxE0B,EAAiB,IAAI5B,OAAOC,EAAEJ,IAAIgC,MAAMC,UAAUN,GAClDO,EAAqB,IAAI/B,OAAOC,EAAEJ,IAAIgC,MAAMC,UAAUH,GAGxDK,EAAQR,EAAuBS,WAC/BC,EAAWP,EAA2BM,WAI1CD,EAAMG,YAAY,sCAAuC,WACzDH,EAAMG,YAAY,yCAAyC,GAE3DD,EAASC,YAAY,sCAAuC,QAC5DD,EAASC,YAAY,qCAAsC,QAG3DH,EAAMI,eAAe,CAAC,QAAQ,GAC9BF,EAASE,eAAe,CAAC,QAAQ,GAGjC,IAAIC,EAAa,IAAIrC,OAAOC,EAAEe,GAAGsB,WAAW,CAAC3B,IAAK,EAAGC,IAAK,GAAI,IAC9DyB,EAAWE,SAAS,eACpBF,EAAWG,QACXxB,EAAGyB,UAAUJ,GAEbb,EAAuBkB,iBAAiB,OAAO,SAACC,GAE5CC,QAAQC,IAAIF,EAAIG,OAAOC,WACnBjD,GAAiBA,IAAkB6C,EAAIG,QACvCT,EAAWG,QAGf1C,EAAgB6C,EAAIG,OACpB,IAAIE,EAAMnD,EAAIoD,YACVN,EAAIO,eAAeC,UACnBR,EAAIO,eAAeE,WACvBf,EAAWgB,YAAYL,GACvBX,EAAWiB,WAAX,+TASgBX,EAAIG,OAAOC,UAAUQ,WAAW,wBAThD,4CAUgBZ,EAAIG,OAAOC,UAAUQ,WAAW,4BAVhD,4CAWgBZ,EAAIG,OAAOC,UAAUQ,WAAW,2BAXhD,odAyBgBZ,EAAIG,OAAOC,UAAUQ,WAAW,+BAzBhD,4CA0BgBZ,EAAIG,OAAOC,UAAUQ,WAAW,mBA1BhD,4CA2BgBZ,EAAIG,OAAOC,UAAUQ,WAAW,4BA3BhD,4CA4BgBZ,EAAIG,OAAOC,UAAUQ,WAAW,yCA5BhD,4CA6BgBZ,EAAIG,OAAOC,UAAUQ,WAAW,4BA7BhD,yFAiCAlB,EAAWmB,UAGf7B,EAA2Be,iBAAiB,OAAO,SAACC,GAElDC,QAAQC,IAAIF,EAAIG,OAAOC,WACnBjD,GAAiBA,IAAkB6C,EAAIG,QACvCT,EAAWG,QAGf1C,EAAgB6C,EAAIG,OACpB,IAAIE,EAAMnD,EAAIoD,YACVN,EAAIO,eAAeC,UACnBR,EAAIO,eAAeE,WACvBf,EAAWgB,YAAYL,GAEvBX,EAAWiB,WAAX,2QAQgBX,EAAIG,OAAOC,UAAUQ,WAAW,gCARhD,4CASgBZ,EAAIG,OAAOC,UAAUQ,WAAW,qBAThD,mFAaAlB,EAAWmB,UAIb3D,EAAI4D,SAAS7B,GACb/B,EAAI4D,SAAS1B,GAEb/B,OAAOH,IAAMA,EAIbG,OAAO0C,iBAAiB,UAAU,WAC9B7C,EAAI6D,cAAcC,YAGtB9D,EAAI6C,iBAAiB,eAAe,SAAAkB,GAMhC,IAAIC,EAAShE,EAAIoD,YAAYW,EAAET,UAAWS,EAAER,WAE5CQ,EAAEE,MAAMC,KAEJ,IAAI/D,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,CACLC,KAAKC,IAAIP,EAAMlD,IAAI0D,QAAQ,KAAQR,EAAMlD,IAAM,EAAK,IAAM,KAC1DwD,KAAKC,IAAIP,EAAMjD,IAAIyD,QAAQ,KAAQR,EAAMjD,IAAM,EAAK,IAAM,MAC1D0D,KAAK,OAGT,IAAItE,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,aACPK,SAAU,WACR1E,EAAI2E,UAAUX,GAAO,MAIzB7D,OAAOC,EAAE+D,KAAKC,YAAYQ,UAE1B,IAAIzE,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,eACPK,SAAU,WACR,EAAKG,MAAMC,gBAAgBd,MAI/B,IAAI7D,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,kBACPK,SAAU,WACR,EAAKG,MAAME,eAAef,MAI9B,IAAI7D,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,cACPK,SAAU,WACR,EAAKG,MAAMG,eAAehB,MAI9B,IAAI7D,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,oBACPK,SAAU,WACR,EAAKG,MAAMI,iBAAiBjB,GAC5B,EAAKa,MAAMK,aAAa,CAACpE,IAAKkD,EAAMlD,IAAKC,IAAKiD,EAAMjD,SAIxD,IAAIZ,OAAOC,EAAE+D,KAAKC,YAAY,CAC5BC,MAAO,gBACPK,SAAU,WACR,EAAKG,MAAMM,sBAMvBC,KAAKC,SAAS,CAAErF,UA7OxB,6CAiPQoF,KAAKrF,MAAMC,IAAIsF,YAjPvB,iCAoPgBC,GAER,IAAIC,EAAe,IAAIrF,OAAOC,EAAEJ,IAAIyF,SAASF,EAAY,CACrDpD,MAAO,CACLuD,UAAW,GACXC,YAAa,yBACbC,YAAa,aACbC,YAAa,gBAIbC,EAAc,IAAI3F,OAAOC,EAAEJ,IAAIyF,SAASF,EAAY,CACtDpD,MAAO,CACLuD,UAAW,GACXK,UAAW,QACXJ,YAAa,yBACbK,SAAU,CAAC,EAAG,GACdJ,YAAa,aACbC,YAAa,gBAIbI,EAAY,IAAI9F,OAAOC,EAAEJ,IAAIkG,MAGjC,OAFAD,EAAUE,WAAW,CAACX,EAAcM,IAE7BG,IA7QjB,+BAgRc,IAEAjG,EAAQoF,KAAKrF,MAAbC,IAEN,GAAW,MAAPA,EAAa,CAyLb,GAxLAA,EAAIoG,cAAcpG,EAAIqG,cAElBjB,KAAKP,MAAMyB,qBAAuBlB,KAAKP,MAAM0B,cAO/CnB,KAAKP,MAAM2B,MAAMC,eAAeC,uBAAuBC,SAAQ,SAAAC,GAE7D5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,QACbD,UAAW,EACXK,UAAW,gCAOnBX,KAAKP,MAAM2B,MAAMC,eAAeQ,sBAAsBN,SAAQ,SAAAC,GAC5D5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,MACbD,UAAW,EACXK,UAAW,iCAWjBX,KAAKP,MAAMqC,qBAAuB9B,KAAKP,MAAM0B,cAE/CnB,KAAKP,MAAM2B,MAAMW,2BAA2BC,mCAAmCT,SAAQ,SAAAC,GACrF5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,QACbD,UAAW,EACXK,UAAW,gCAQnBX,KAAKP,MAAM2B,MAAMW,2BAA2BE,gCAAgCV,SAAQ,SAAAC,GAClF5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,MACbD,UAAW,EACXK,UAAW,gCAOnBX,KAAKP,MAAM2B,MAAMW,2BAA2BG,iCAAiCX,SAAQ,SAAAC,GACnF5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,SACbD,UAAW,EACXK,UAAW,iCAUjBX,KAAKP,MAAM0C,sBAAwBnC,KAAKP,MAAM0B,cAChDnB,KAAKP,MAAM2B,MAAMgB,cAAcC,6BAA6Bd,SAAQ,SAAAC,GAClE5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,QACbD,UAAW,EACXK,UAAW,gCAQnBX,KAAKP,MAAM2B,MAAMgB,cAAcE,2BAA2Bf,SAAQ,SAAAC,GAChE5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,MACbD,UAAW,EACXK,UAAW,gCAOnBX,KAAKP,MAAM2B,MAAMgB,cAAcG,8BAA8BhB,SAAQ,SAAAC,GACnE5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,SACbD,UAAW,EACXK,UAAW,4BAEZ6B,UAAU,QAMfxC,KAAKP,MAAMgD,sBAAwBzC,KAAKP,MAAM0B,cAChDnB,KAAKP,MAAM2B,MAAMsB,gBAAgBC,6BAA6BpB,SAAQ,SAAAC,GACpE5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,QACbD,UAAW,EACXK,UAAW,gCAQnBX,KAAKP,MAAM2B,MAAMsB,gBAAgBE,2BAA2BrB,SAAQ,SAAAC,GAClE5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,MACbD,UAAW,EACXK,UAAW,gCAOnBX,KAAKP,MAAM2B,MAAMsB,gBAAgBG,8BAA8BtB,SAAQ,SAAAC,GACrE5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAI8G,OAAO,CAAChG,IAAI8F,EAAQG,SAASC,YAAY,GAAIjG,IAAK6F,EAAQG,SAASC,YAAY,IAC5G,IACA,CACE7E,MAAO,CACLwD,YAAa,SACbD,UAAW,EACXK,UAAW,iCAQrBX,KAAKP,MAAMqD,UAAUvB,SAAQ,SAAAC,GACzB5G,EAAI6G,UAAU,IAAI1G,OAAOC,EAAEJ,IAAImI,OAAOvB,OAGV,IAA5BxB,KAAKP,MAAMuD,MAAMC,OAAc,CAE/B,IAAIC,EAAa,IAAInI,OAAOC,EAAEmI,IAAIC,WAElCpD,KAAKP,MAAMuD,MAAMzB,SAAQ,SAAAC,GACrB0B,EAAWG,UAAU,CAAC3H,IAAK8F,EAAQ,GAAI7F,IAAK6F,EAAQ,QAGxD,IAAIX,EAAYb,KAAKsD,WAAWJ,GAEhCtI,EAAI6G,UAAUZ,GAGlB,GAAiC,GAA7Bb,KAAKP,MAAM8D,QAAQN,OAAa,CAGlCjD,KAAKP,MAAM8D,QAAQhC,SAAQ,SAAAC,GAEzB,IAAIrB,EAAa,IAAIpF,OAAOC,EAAEmI,IAAIC,WAClC5B,EAAQD,SAAQ,SAAAiC,GACd,IAAIC,EAASD,EAASE,MAAM,KAC1BvD,EAAWkD,UAAU,CAAC3H,IAAKiI,OAAOF,EAAO,IAAK9H,IAAKgI,OAAOF,EAAO,SAErE,IAAIG,EAAU,IAAI7I,OAAOC,EAAEJ,IAAIiJ,QAAQ1D,EAAY,CAAEpD,MAAO,CAAEuD,UAAW,KAEzE1F,EAAI6G,UAAUmC,MAOhB,IACE5D,KAAKP,MAAMqE,OAAOvC,SAAQ,SAAAC,GACxB,IAAIsC,EAAS,IAAI/I,OAAOC,EAAEJ,IAAImI,OAAOvB,GAErC5G,EAAI6G,UAAUqC,MAIhB,MAAOC,GACPpG,QAAQC,IAAI,iBAMpB,OAAO,yBAAKoG,GAAG,MAAMjH,MAAO,CAAEkH,OAAQ,OAAQC,MAAO,cA5f7D,GAAyBC,a,gCCOZC,EAAb,iLAEe,IAAD,OAIN,OACI,oCACA,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,wBAEf,wBAAIA,UAAU,OAAOtH,MAAO,CAACuH,UAAW,SAAxC,wBAGA,uBAAGD,UAAU,QAAb,4GAE6C,6BAF7C,kEAIA,uBAAGA,UAAU,QACT,0FAGJ,uBAAGA,UAAU,QACT,6DAAqC,6BAAK,6BAC1C,uGAEL,kBAACE,EAAA,EAAD,CAAWF,UAAU,UACjB,yBAAKA,UAAU,sBAAsBtH,MAAO,CAACuH,UAAW,UAItB,GAA1BtE,KAAKP,MAAM0B,YACV,gDAGA,oCACI,kBAACqD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,6CACA,gDAAsBzE,KAAKP,MAAM2B,MAAMC,eAAeqD,eAAtD,KACA,4CAAkB1E,KAAKP,MAAM2B,MAAMC,eAAesD,YAClD,yBAAK5H,MAAO,CAAC6H,MAAM,UAAnB,kBAA6C5E,KAAKP,MAAM2B,MAAMC,eAAewD,cAA7E,cACA,yBAAK9H,MAAO,CAAC6H,MAAM,QAAnB,uBAAgD5E,KAAKP,MAAM2B,MAAMC,eAAeyD,aAAhF,cACA,kBAACC,EAAA,EAAD,CAAQV,UAAU,UAAUtH,MAAO,CAACiI,MAAM,QAASV,UAAW,OAAQW,QAAS,kBAAM,EAAKxF,MAAMyF,qBAAqB,yBAArH,0BAGR,yBAAKb,UAAU,sBAAsBtH,MAAO,CAACuH,UAAW,UACxD,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,qEACA,gDAAsBzE,KAAKP,MAAM2B,MAAMW,2BAA2BoD,qBAAlE,KACA,yBAAKpI,MAAO,CAAC6H,MAAM,QAAnB,0BAAmD5E,KAAKP,MAAM2B,MAAMW,2BAA2BqD,uBAA/F,cACA,yBAAKrI,MAAO,CAAC6H,MAAM,WAAnB,wBAAoD5E,KAAKP,MAAM2B,MAAMW,2BAA2BsD,wBAAhG,cACA,yBAAKtI,MAAO,CAAC6H,MAAM,UAAnB,yBAAoD5E,KAAKP,MAAM2B,MAAMW,2BAA2BuD,0BAAhG,cACA,kBAACP,EAAA,EAAD,CAAQV,UAAU,UAAUtH,MAAO,CAACiI,MAAM,QAASV,UAAW,OAAQW,QAAS,kBAAM,EAAKxF,MAAMyF,qBAAqB,yBAArH,0BAGR,yBAAKb,UAAU,sBAAsBtH,MAAO,CAACuH,UAAW,UACxD,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,gDACA,yBAAK1H,MAAO,CAAC6H,MAAM,QAAnB,kBAA2C5E,KAAKP,MAAM2B,MAAMgB,cAAcmD,kBAA1E,cACA,yBAAKxI,MAAO,CAAC6H,MAAM,WAAnB,WAAuC5E,KAAKP,MAAM2B,MAAMgB,cAAcoD,qBAAtE,cACA,yBAAKzI,MAAO,CAAC6H,MAAM,UAAnB,eAA0C5E,KAAKP,MAAM2B,MAAMgB,cAAcqD,oBAAzE,cACA,kBAACV,EAAA,EAAD,CAAQV,UAAU,UAAUtH,MAAO,CAACiI,MAAM,QAASV,UAAW,OAAQW,QAAS,kBAAM,EAAKxF,MAAMyF,qBAAqB,0BAArH,0BAGR,yBAAKb,UAAU,sBAAsBtH,MAAO,CAACuH,UAAW,UACxD,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,8CACA,yBAAK1H,MAAO,CAAC6H,MAAM,QAAnB,kBAA2C5E,KAAKP,MAAM2B,MAAMsB,gBAAgBgD,kBAA5E,cACA,yBAAK3I,MAAO,CAAC6H,MAAM,WAAnB,WAAuC5E,KAAKP,MAAM2B,MAAMsB,gBAAgBiD,qBAAxE,cACA,yBAAK5I,MAAO,CAAC6H,MAAM,UAAnB,cAAyC5E,KAAKP,MAAM2B,MAAMsB,gBAAgBkD,oBAA1E,cACA,kBAACb,EAAA,EAAD,CAAQV,UAAU,UAAUtH,MAAO,CAACiI,MAAM,QAASV,UAAW,OAAQW,QAAS,kBAAM,EAAKxF,MAAMyF,qBAAqB,0BAArH,0BAGR,yBAAKb,UAAU,sBAAsBtH,MAAO,CAACuH,UAAW,aAS5E,yBAAKN,GAAG,UACJ,2BAAOK,UAAU,eAAetH,MAAO,CAACuH,UAAU,OAAQuB,YAAY,SAASC,MAAO9F,KAAKP,MAAMsG,WAAYC,SAAU,SAAArH,GAAO,EAAKc,MAAMwG,eAAetH,EAAEuH,cAAcJ,UACxK,yBAAK9B,GAAG,yBAE4BmC,IAA3BnG,KAAKP,MAAM2G,YACRpG,KAAKP,MAAM2G,YAAYxL,KAAI,SAACyL,EAAQC,GAChC,OAAO,yBAAKjC,UAAU,eAAekC,IAAKD,EAAIrB,QAAS,kBAAM,EAAKxF,MAAM+G,QAAQH,EAAOI,cAAeJ,EAAOpH,UAKjHtB,QAAQC,IAAI,eAjGxC,GAA2BuG,aC6RZuC,G,kBA5Rb,WAAajH,GAAQ,IAAD,8BAClB,4CAAMA,KAED9E,MAAQ,CACXmI,UAAW,GACXE,MAAO,GACPoD,YAAY,GACZL,WAAW,GACXjC,OAAQ,GACRP,QAAS,GACTnC,MAAO,GACPF,qBAAqB,EACrBY,qBAAqB,EACrBK,sBAAsB,EACtBM,sBAAsB,EACtBtB,aAAa,GAGf,EAAK8E,eAAiB,EAAKA,eAAeU,KAApB,gBACtB,EAAKH,QAAU,EAAKA,QAAQG,KAAb,gBACf,EAAKjH,gBAAkB,EAAKA,gBAAgBiH,KAArB,gBACvB,EAAK/G,eAAiB,EAAKA,eAAe+G,KAApB,gBACtB,EAAKhH,eAAiB,EAAKA,eAAegH,KAApB,gBAEtB,EAAK9G,iBAAmB,EAAKA,iBAAiB8G,KAAtB,gBACxB,EAAK5G,aAAe,EAAKA,aAAa4G,KAAlB,gBACpB,EAAK7G,aAAe,EAAKA,aAAa6G,KAAlB,gBACpB,EAAKzB,qBAAuB,EAAKA,qBAAqByB,KAA1B,gBA3BV,E,iFA8BE,IAAD,OACnBC,IAAMC,IAAI,6FACPC,MAAK,SAAAC,GAGF,IAAIC,EAAU,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,GAEvDC,EAAW,GACfJ,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAI2F,EAASrI,KAAK0C,EAAQlD,WAAWiJ,qBACrE,IAAIC,EAAuBL,EAASM,OAAOT,GAEvCU,EAAO,GACXX,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAIkG,EAAK5I,KAAK0C,EAAQlD,WAAWoJ,SACjE,IAAI/C,EAAa+C,EAAKD,OAAOT,GAEzBnC,EAAgBkC,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAIA,EAAQlD,WAAWoJ,KAAOlG,EAAQlD,WAAWiJ,oBACjGzC,EAAeiC,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAIA,EAAQlD,WAAWoJ,KAAOlG,EAAQlD,WAAWiJ,oBAGhGI,EAAiB,GACrBZ,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAImG,EAAe7I,KAAK0C,EAAQlD,WAAWyD,+BAC3E,IAAIoD,EAAuBwC,EAAeF,OAAOT,GAE7C5B,EAAyB2B,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAIA,EAAQlD,WAAWyD,2BAA6B,KAC7GsD,EAA0B0B,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAIA,EAAQlD,WAAWyD,2BAA6B,IAAMP,EAAQlD,WAAWyD,2BAA6B,KACpKuD,EAA4ByB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,OAAIA,EAAQlD,WAAWyD,2BAA6B,MAEhH2D,EAAoBqB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,MAAyC,wBAArCA,EAAQlD,WAAWsJ,iBAC3EjC,EAAuBoB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,MAAyC,WAArCA,EAAQlD,WAAWsJ,iBAC9EhC,EAAsBmB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,MAAyC,cAArCA,EAAQlD,WAAWsJ,iBAE7ErC,EAAoBwB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,MAAyC,wBAArCA,EAAQlD,WAAW8D,iBAC3EoD,EAAuBuB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,MAAyC,WAArCA,EAAQlD,WAAW8D,iBAC9EqD,EAAsBsB,EAAIK,KAAKC,SAASC,QAAO,SAAA9F,GAAO,MAAyC,cAArCA,EAAQlD,WAAW8D,iBAE7EyF,EAAc,CAChBxG,eAAgB,CACdqD,eAAgB8C,EAChB7C,WAAYA,EACZE,cAAeA,EAAc5B,OAC7B3B,uBAAwBuD,EACxBC,aAAcA,EAAa7B,OAC3BpB,sBAAuBiD,GAEzB/C,2BAA4B,CAC1BoD,qBAAsBA,EACtBC,uBAAwBA,EAAuBnC,OAC/ChB,gCAAiCmD,EACjCC,wBAAyBA,EAAwBpC,OACjDf,iCAAkCmD,EAClCC,0BAA2BA,EAA0BrC,OACrDjB,mCAAoCsD,GAEtClD,cAAe,CACbmD,kBAAmBA,EAAkBtC,OACrCX,2BAA4BiD,EAC5BC,qBAAsBA,EAAqBvC,OAC3CV,8BAA+BiD,EAC/BC,oBAAqBA,EAAoBxC,OACzCZ,6BAA8BoD,GAEhC/C,gBAAgB,CACdgD,kBAAmBA,EAAkBzC,OACrCL,2BAA4B8C,EAC5BC,qBAAsBA,EAAqB1C,OAC3CJ,8BAA+B8C,EAC/BC,oBAAqBA,EAAoB3C,OACzCN,6BAA8BiD,IAIlC,EAAK3F,SAAS,CAACmB,MAAOyG,EAAa1G,aAAa,S,2CAKlCvE,GAEN,wBAAVA,EACFoD,KAAKC,SAAS,CACZiB,qBAAsBlB,KAAKrF,MAAMuG,oBACjCY,qBAAqB,EACrBK,sBAAsB,EACtBM,sBAAsB,IAEL,wBAAV7F,EACToD,KAAKC,SAAS,CACZ6B,qBAAsB9B,KAAKrF,MAAMmH,oBACjCZ,qBAAqB,EACrBiB,sBAAsB,EACtBM,sBAAsB,IAEL,yBAAV7F,EACToD,KAAKC,SAAS,CACZkC,sBAAuBnC,KAAKrF,MAAMwH,qBAClCjB,qBAAqB,EACrBY,qBAAqB,EACrBW,sBAAsB,IAEL,yBAAV7F,GACToD,KAAKC,SAAS,CACZwC,sBAAuBzC,KAAKrF,MAAM8H,qBAClCvB,qBAAqB,EACrBY,qBAAqB,EACrBK,sBAAsB,M,uCAMVvD,GAAQ,IAAD,OAInBkJ,EAHiB,0EAGc,iBAAarN,EAAb,gEAA2EmE,EAAMlD,IAAjF,YAAwFkD,EAAMjD,KAEjIiL,IAAMC,IAAIiB,GACPhB,MAAK,SAAAC,GACqB,OAAtBA,EAAIK,KAAKW,UACV,EAAK9H,SAAS,CAAC,QAAU,GAAV,mBAAe,EAAKtF,MAAM4I,SAA1B,CAAmCwD,EAAIK,KAAKW,SAASxE,QAAQ,GAAGyE,UAAU,GAAGC,aAG7F,SAAAC,GACDvK,QAAQC,IAAIsK,Q,mCAKJzE,GACZzD,KAAKC,SAAS,CAAE6D,OAAO,GAAD,mBAAM9D,KAAKrF,MAAMmJ,QAAjB,CAAyBL,Q,qCAI/CzD,KAAKC,SAAS,CACVsD,QAAS,GACTO,OAAQ,O,8BAIL2C,GAAa,IAAD,OAEf0B,EADU,mDACW,sBAAkB1B,EAAlB,mBAAuChM,GAChEmM,IAAMC,IAAIsB,GAAarB,MAAK,SAAAC,GAE1B,IAAIrL,EAAMqL,EAAIK,KAAKgB,SAASC,KAAK,GAAGC,OAAO,GAAGC,SAASC,gBAAgBC,SACnE9M,EAAMoL,EAAIK,KAAKgB,SAASC,KAAK,GAAGC,OAAO,GAAGC,SAASC,gBAAgBE,UAEvE3N,OAAOH,IAAI2E,UAAU,CAAC7D,IAAIA,EAAIC,IAAIA,IAClCZ,OAAOH,IAAI+N,QAAQ,IAEnB,EAAK1I,SAAS,CAAC8F,WAAY,GAAI6C,gBAAiB,GAAIxC,YAAY,U,qCAKrDL,GAAY,IAAD,OACxB/F,KAAKC,SAAS,CAAC8F,WAAYA,IAE3B,IACI8C,EADU,gEACM,iBAAa9C,GAApB,kBAA8CtL,GAAW,iBAEtEmM,IAAMC,IAAIgC,GAAQ/B,MAAK,SAAAC,GAErB,EAAK9G,SAAS,CAACmG,YAAaW,EAAIK,KAAKhB,mB,uCAKtB,IAAD,OAIZ0C,EAAoB9I,KAAKrF,MAAMmI,UAAUlI,KAAK,SAAC6I,EAAQ6C,GAEzD,OAAU,IAANA,EACI,SAAN,OAAgBA,EAAhB,YAAqB7C,EAAO/H,IAA5B,YAAmC+H,EAAO9H,KACjC2K,IAAM,EAAK3L,MAAMmI,UAAUG,OAAQ,EACtC,OAAN,OAAcqD,EAAd,YAAmB7C,EAAO/H,IAA1B,YAAiC+H,EAAO9H,KAElC,cAAN,OAAqB2K,EAArB,YAA0BA,EAA1B,YAA+B7C,EAAO/H,IAAtC,YAA6C+H,EAAO9H,QAErD0D,KAAK,KAEJ0J,EAdkB,kDAcgB,iBAAatO,EAAb,uBAA2CqO,EAEjFlC,IAAMC,IAAIkC,GACPjC,MAAK,SAAAC,GAEJ,IAAIiC,EAAgBjC,EAAIK,KAAK6B,QAAQ,GAAGnG,UAAUlI,KAAK,SAACsO,EAAO5C,GAC7D,MAAM,WAAN,OAAkBA,EAAlB,gBAA2B4C,EAAMxN,IAAjC,YAAwCwN,EAAMvN,QAC7C0D,KAAK,KAEJ8J,EAtBW,gEAsBgB,iBAAa1O,EAAb,0DAA8EuO,EAE7GpC,IAAMC,IAAIsC,GACPrC,MAAK,SAAAsC,GACJ,IAAIC,EAAgBD,EAAShC,KAAKW,SAAS/E,MAAM,GAAGiF,MAAMrN,KAAI,SAAC6I,EAAQ6C,GACrE,OAAO7C,EAAOC,MAAM,KAAK9I,IAAI+I,WAE/B,EAAK1D,SAAS,CAAC+C,MAAOqG,UAEzB,SAAAnB,GACDvK,QAAQC,IAAIsK,Q,sCAKDoB,GACftJ,KAAKC,SAAS,CAAE6C,UAAU,GAAD,mBAAM9C,KAAKrF,MAAMmI,WAAjB,CAA4BwG,Q,uCAIrDtJ,KAAKC,SAAS,CAAE6C,UAAW,GAAIE,MAAO,O,+BAItC,OACE,oCACE,kBAAC,EAAD,CAEE9B,oBAAqBlB,KAAKrF,MAAMuG,oBAChCY,oBAAqB9B,KAAKrF,MAAMmH,oBAChCK,qBAAsBnC,KAAKrF,MAAMwH,qBACjCM,qBAAsBzC,KAAKrF,MAAM8H,qBACjCtB,YAAanB,KAAKrF,MAAMwG,YACxBC,MAAOpB,KAAKrF,MAAMyG,MAClB1B,gBAAkBM,KAAKN,gBACvBoD,UAAY9C,KAAKrF,MAAMmI,UACvBE,MAAQhD,KAAKrF,MAAMqI,MACnBpD,eAAiBI,KAAKJ,eACtBD,eAAgBK,KAAKL,eAErBG,aAAcE,KAAKF,aACnBD,iBAAkBG,KAAKH,iBACvBE,aAAeC,KAAKD,aACpBwD,QAASvD,KAAKrF,MAAM4I,QACpBO,OAAQ9D,KAAKrF,MAAMmJ,SAGrB,kBAAC,EAAD,CACEoB,qBAAsBlF,KAAKkF,qBAC3B/D,YAAanB,KAAKrF,MAAMwG,YACxBC,MAAOpB,KAAKrF,MAAMyG,MAClBxB,eAAiBI,KAAKJ,eACtBkD,UAAY9C,KAAKrF,MAAMmI,UACvBnD,eAAgBK,KAAKL,eACrBsG,eAAgBjG,KAAKiG,eACrBO,QAASxG,KAAKwG,QACdJ,YAAapG,KAAKrF,MAAMyL,mB,GAxRhBjC,c,MCFlBoF,IAASC,OAAO,kBAAC,EAAD,MAASnO,SAASC,eAAe,W","file":"static/js/main.eb4ee85d.chunk.js","sourcesContent":["export const apikey = \"d94UCjhJ6sEzabRJjKV8Z5-w6Py99jqHQAB-uj6g6ks\"","import React, { Component } from 'react'\r\nimport { apikey } from '../assets/js/apikey'\r\nimport axios from \"axios\"\r\n\r\nexport class Map extends Component {\r\n    \r\n  \r\n    state = {\r\n        map: null,\r\n    }\r\n\r\n    componentDidMount () {\r\n        const platform = new window.H.service.Platform({\r\n            apikey: apikey\r\n        })\r\n\r\n        const defaultLayers = platform.createDefaultLayers()\r\n\r\n        const map = new window.H.Map(\r\n        document.getElementById(\"map\"),\r\n        defaultLayers.vector.normal.map,\r\n            {\r\n                center: { lat: 51.00684227163969, lng: 10.008544921875  },\r\n                zoom: 6,\r\n                pixelRatio: window.devicePixelRatio || 1\r\n            }\r\n        )\r\n\r\n        const behavior = new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(map))\r\n        const ui = window.H.ui.UI.createDefault(map, defaultLayers)\r\n\r\n\r\n        // axios.get(\"https://xyz.api.here.com/hub/spaces/FDpKa5v3/iterate?access_token=ADCvnYiwQuqs6A5qSkJwawA\")\r\n        //   .then(res => {\r\n          //   let dataPoints = res.data.features.map(function (item) {\r\n          //     return new window.H.clustering.DataPoint(item.geometry.coordinates[1], item.geometry.coordinates[0])\r\n          //   })\r\n    \r\n          //   let clusteredDataProvider = new window.H.clustering.Provider(dataPoints, {\r\n          //     clusteringOptions: {\r\n          //       // Maximum radius of the neighbourhood\r\n          //       eps: 32,\r\n          //       // minimum weight of points required to form a cluster\r\n          //       minWeight: 10\r\n          //     }\r\n          //   })\r\n    \r\n          //   let clusteringLayer = new window.H.map.layer.ObjectLayer(clusteredDataProvider)\r\n          // //  debugger\r\n          // debugger\r\n          //   map.addLayer(clusteringLayer)\r\n        //   })\r\n\r\n        // Initialize connection with HERE XYZ Hub\r\n        const service = platform.getXYZService({\r\n          token: \"AKChCVlEQcC-jEHlFKZMOgA\"\r\n        })\r\n\r\n        // Set data layer provider by SPACE_ID\r\n        const hospitalsSpaceProvider = new window.H.service.xyz.Provider(service, \"WCHK0sa1\")\r\n        const medWarehousesSpaceProvider = new window.H.service.xyz.Provider(service, \"hoCxTKFb\")\r\n\r\n        // Create tile layer\r\n        const hospitalsLayer = new window.H.map.layer.TileLayer(hospitalsSpaceProvider)\r\n        const medWarehousesLayer = new window.H.map.layer.TileLayer(medWarehousesSpaceProvider)\r\n\r\n        // get the style for the layer\r\n        var style = hospitalsSpaceProvider.getStyle()\r\n        var style_wh = medWarehousesSpaceProvider.getStyle()\r\n        // debugger\r\n\r\n        // change the color of the polygons\r\n        style.setProperty('layers.xyz.points.draw.points.color', '#8d6bae')\r\n        style.setProperty('layers.xyz.points.draw.points.collide', true)\r\n\r\n        style_wh.setProperty('layers.xyz.points.draw.points.color', 'blue')\r\n        style_wh.setProperty('layers.xyz.points.draw.points.size', \"14px\")\r\n        // debugger\r\n\r\n        style.setInteractive(['xyz'], true)\r\n        style_wh.setInteractive(['xyz'], true)\r\n\r\n        let hoveredObject\r\n        let infoBubble = new window.H.ui.InfoBubble({lat: 0, lng: 0}, {})\r\n        infoBubble.addClass('info-bubble')\r\n        infoBubble.close()\r\n        ui.addBubble(infoBubble)\r\n        \r\n        hospitalsSpaceProvider.addEventListener('tap', (evt) => {\r\n            // debugger\r\n            console.log(evt.target.getData())\r\n            if (hoveredObject && hoveredObject !== evt.target) {\r\n                infoBubble.close()\r\n            }\r\n        \r\n            hoveredObject = evt.target;\r\n            let pos = map.screenToGeo(\r\n                evt.currentPointer.viewportX,\r\n                evt.currentPointer.viewportY)\r\n            infoBubble.setPosition(pos)\r\n            infoBubble.setContent(`\r\n                <div class=\"info-bubble-label\">\r\n                  <table>\r\n                    <tr>\r\n                      <th>Hospital</th>\r\n                      <th>Contacts</th>\r\n                      <th>Postal code</th>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>${evt.target.getData().properties[\"properties. poi_name\"]}</td>\r\n                      <td>${evt.target.getData().properties[\"properties. contact_info\"]}</td>\r\n                      <td>${evt.target.getData().properties[\"properties. postal_code\"]}</td>\r\n                    </tr>\r\n                  </table>\r\n                 \r\n                  <hr/>\r\n                  <table>\r\n                    <tr>\r\n                      <th>Patients</th>\r\n                      <th>Beds</th>\r\n                      <th>COVID tests</th>\r\n                      <th>Lungs machines</th>\r\n                      <th>Medical Equipment</th>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>${evt.target.getData().properties[\"properties.covirus_patients\"]}</td>\r\n                      <td>${evt.target.getData().properties[\"properties.beds\"]}</td>\r\n                      <td>${evt.target.getData().properties[\"properties.covirus_tests\"]}</td>\r\n                      <td>${evt.target.getData().properties[\"properties.lungs_ventilation_machines\"]}</td>\r\n                      <td>${evt.target.getData().properties[\"properties.medical_masks\"]}</td>\r\n                    </tr>\r\n                  </table>\r\n                </div>`)\r\n            infoBubble.open()\r\n        })\r\n\r\n        medWarehousesSpaceProvider.addEventListener('tap', (evt) => {\r\n          // debugger\r\n          console.log(evt.target.getData())\r\n          if (hoveredObject && hoveredObject !== evt.target) {\r\n              infoBubble.close()\r\n          }\r\n      \r\n          hoveredObject = evt.target;\r\n          let pos = map.screenToGeo(\r\n              evt.currentPointer.viewportX,\r\n              evt.currentPointer.viewportY)\r\n          infoBubble.setPosition(pos)\r\n          // debugger\r\n          infoBubble.setContent(`\r\n              <div class=\"info-bubble-label\">\r\n                <table>\r\n                  <tr>\r\n                    <th>Medical Warehouse</th>\r\n                    <th>Address</th>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>${evt.target.getData().properties[\"properties.Medical warehouse\"]}</td>  \r\n                    <td>${evt.target.getData().properties[\"properties.Adress\"]}</td>\r\n                  </tr>\r\n                </table>\r\n              </div>`)\r\n          infoBubble.open()\r\n      })\r\n\r\n        // Add layer to the map\r\n        map.addLayer(hospitalsLayer)\r\n        map.addLayer(medWarehousesLayer)\r\n\r\n        window.map = map\r\n\r\n        \r\n\r\n        window.addEventListener('resize', function() {\r\n            map.getViewPort().resize()\r\n        })\r\n\r\n        map.addEventListener('contextmenu', e => {\r\n\r\n            // if (e.target !== map) {\r\n            //     return\r\n            // }\r\n           \r\n            let coord  = map.screenToGeo(e.viewportX, e.viewportY)\r\n\r\n            e.items.push(\r\n\r\n                new window.H.util.ContextItem({\r\n                  label: [\r\n                    Math.abs(coord.lat.toFixed(4)) + ((coord.lat > 0) ? 'N' : 'S'),\r\n                    Math.abs(coord.lng.toFixed(4)) + ((coord.lng > 0) ? 'E' : 'W')\r\n                  ].join(' ')\r\n                }),\r\n                \r\n                new window.H.util.ContextItem({\r\n                  label: 'Center Map',\r\n                  callback: function() {\r\n                    map.setCenter(coord, true);\r\n                  }\r\n                }),\r\n                \r\n                window.H.util.ContextItem.SEPARATOR,\r\n                \r\n                new window.H.util.ContextItem({\r\n                  label: 'Add Waypoint',\r\n                  callback: () => {\r\n                    this.props.updateWaypoints(coord)\r\n                  }\r\n                }),\r\n\r\n                new window.H.util.ContextItem({\r\n                  label: 'Calculate route',\r\n                  callback: () => {\r\n                    this.props.calculateRoute(coord)\r\n                  }\r\n                }),\r\n\r\n                new window.H.util.ContextItem({\r\n                  label: 'Clear route',\r\n                  callback: () => {\r\n                    this.props.clearWaypoints(coord)\r\n                  }\r\n                }),\r\n\r\n                new window.H.util.ContextItem({\r\n                  label: 'Calculate Isoline',\r\n                  callback: () => {\r\n                    this.props.calculateIsoline(coord)\r\n                    this.props.updateMarker({lat: coord.lat, lng: coord.lng})\r\n                  }\r\n                }),\r\n\r\n                new window.H.util.ContextItem({\r\n                  label: 'Clear Isoline',\r\n                  callback: () => {\r\n                    this.props.clearIsoline()\r\n                  }\r\n                })\r\n              )\r\n        })\r\n\r\n        this.setState({ map })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.state.map.dispose()\r\n    }\r\n\r\n    styleRoute (linestring) {\r\n        \r\n        let routeOutline = new window.H.map.Polyline(linestring, {\r\n            style: {\r\n              lineWidth: 10,\r\n              strokeColor: 'rgba(0, 128, 255, 0.7)',\r\n              lineTailCap: 'arrow-tail',\r\n              lineHeadCap: 'arrow-head'\r\n            }\r\n          })\r\n          \r\n          let routeArrows = new window.H.map.Polyline(linestring, {\r\n            style: {\r\n              lineWidth: 10,\r\n              fillColor: 'white',\r\n              strokeColor: 'rgba(255, 255, 255, 1)',\r\n              lineDash: [0, 2],\r\n              lineTailCap: 'arrow-tail',\r\n              lineHeadCap: 'arrow-head' }\r\n            }\r\n          )\r\n  \r\n          let routeLine = new window.H.map.Group();\r\n          routeLine.addObjects([routeOutline, routeArrows])\r\n\r\n          return routeLine\r\n    }\r\n    \r\n    render() {\r\n\r\n        let { map } = this.state\r\n        \r\n        if( map != null ){\r\n            map.removeObjects(map.getObjects())\r\n\r\n            if (this.props.show_patients_layer && this.props.reqFinished) {\r\n\r\n              // let red_icon = new window.H.map.Icon(\"/assets/icons/red_hospital.png\")\r\n              // let green_icon = new window.H.map.Icon(\"/assets/icons/green_hospital.png\")\r\n\r\n\r\n\r\n              this.props.stats.covid_patients.has_free_beds_features.forEach(feature => {\r\n               \r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'green', // green\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(76, 175, 80, 0.2)'  \r\n                    }\r\n                  })\r\n                )\r\n              })\r\n\r\n\r\n              this.props.stats.covid_patients.no_free_beds_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'red', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(244, 67, 54, 0.2)' \r\n                    }\r\n                  })\r\n                )\r\n\r\n              })\r\n\r\n             \r\n            }\r\n\r\n\r\n            if (this.props.show_machines_layer && this.props.reqFinished) {\r\n              \r\n              this.props.stats.lungs_ventilation_machines.lungs_machines_greater_10_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'green', // green\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(76, 175, 80, 0.2)'  \r\n                    }\r\n                  })\r\n                )\r\n       \r\n              })\r\n\r\n\r\n              this.props.stats.lungs_ventilation_machines.lungs_machines_lower_5_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'red', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(244, 67, 54, 0.2)' \r\n                    }\r\n                  })\r\n                )\r\n\r\n              })\r\n\r\n              this.props.stats.lungs_ventilation_machines.lungs_machines_lower_10_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'orange', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(255, 152, 0, 0.2)' \r\n                    }\r\n                  })\r\n                )\r\n       \r\n              })\r\n\r\n              \r\n            }\r\n            \r\n            if (this.props.show_equipment_layer && this.props.reqFinished) {\r\n              this.props.stats.medical_masks.covirus_masks_share_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'green', // green\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(76, 175, 80, 0.2)'  \r\n                    }\r\n                  })\r\n                )\r\n       \r\n              })\r\n\r\n\r\n              this.props.stats.medical_masks.covirus_masks_few_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'red', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(244, 67, 54, 0.2)' \r\n                    }\r\n                  }) \r\n                )\r\n\r\n              })\r\n\r\n              this.props.stats.medical_masks.covirus_masks_enough_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'orange', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(255, 152, 0, 0.2)' \r\n                    }\r\n                  }).setZIndex(0) \r\n                )\r\n       \r\n              })\r\n            }\r\n\r\n            if (this.props.show_test_kits_layer && this.props.reqFinished) {\r\n              this.props.stats.covid_test_kits.covirus_tests_share_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'green', // green\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(76, 175, 80, 0.2)'  \r\n                    }\r\n                  })\r\n                )\r\n       \r\n              })\r\n\r\n\r\n              this.props.stats.covid_test_kits.covirus_tests_few_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'red', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(244, 67, 54, 0.2)' \r\n                    }\r\n                  })\r\n                )\r\n\r\n              })\r\n\r\n              this.props.stats.covid_test_kits.covirus_tests_enough_features.forEach(feature => {\r\n                map.addObject(new window.H.map.Circle({lat:feature.geometry.coordinates[1], lng: feature.geometry.coordinates[0]},\r\n                  600,\r\n                  {\r\n                    style: {\r\n                      strokeColor: 'orange', // red\r\n                      lineWidth: 2,\r\n                      fillColor: 'rgba(255, 152, 0, 0.2)' \r\n                    }\r\n                  })\r\n                )\r\n       \r\n              })\r\n            }\r\n\r\n            this.props.waypoints.forEach(feature => {\r\n                map.addObject(new window.H.map.Marker(feature))\r\n            })\r\n\r\n            if (this.props.route.length !== 0) {\r\n                \r\n                let lineString = new window.H.geo.LineString()\r\n                \r\n                this.props.route.forEach(feature => {\r\n                    lineString.pushPoint({lat: feature[0], lng: feature[1]})\r\n                })\r\n                \r\n                let routeLine = this.styleRoute(lineString)\r\n\r\n                map.addObject(routeLine)\r\n            }\r\n\r\n            if( this.props.isoline.length != 0) {\r\n              \r\n\r\n              this.props.isoline.forEach(feature => {\r\n                // debugger\r\n                let linestring = new window.H.geo.LineString()\r\n                feature.forEach(geofence => {\r\n                  let coords = geofence.split(\",\")\r\n                    linestring.pushPoint({lat: Number(coords[0]), lng: Number(coords[1])})\r\n                })\r\n                let polygon = new window.H.map.Polygon(linestring, { style: { lineWidth: 3 }})\r\n                \r\n                map.addObject(polygon)\r\n              })\r\n  \r\n              \r\n              // debugger\r\n              \r\n\r\n              try {\r\n                this.props.marker.forEach(feature => {\r\n                  let marker = new window.H.map.Marker(feature)\r\n                  // map.addObject(new window.H.map.Marker(feature.lat, feature.lng))\r\n                  map.addObject(marker)\r\n                })\r\n                \r\n                \r\n              } catch (err){\r\n                console.log(\"Null coords\")\r\n              }\r\n            }\r\n            \r\n        }\r\n\r\n        return <div id=\"map\" style={{ height: \"100%\", width: \"100%\" }} />\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport {\r\n    Container,\r\n    Col,\r\n    Row,\r\n    Button,\r\n    ButtonGroup,\r\n    ButtonToggle\r\n} from 'reactstrap'\r\n\r\nexport class Panel extends Component {\r\n    \r\n    render () {\r\n\r\n      \r\n\r\n        return (\r\n            <>\r\n            <div className='control-panel box-shadow'>\r\n                <div className=\"bg-gradient-here-da\" />\r\n                \r\n                <h3 className=\"pres\" style={{marginTop: \"10px\"}}>\r\n                    HERE Analytical Tool\r\n                </h3>\r\n                <p className=\"pres\">\r\n                    Help hospitals distribute inventory to areas that need it most.\r\n                    Analyze nearest hospitals that need help.<br/> Calculate optimal routes using HERE Waypoint and Isoline API. \r\n                </p>\r\n                <p className=\"pres\">\r\n                    <b>Right mouse click on the map to calulate route or isoline.</b>\r\n                </p>\r\n\r\n                <p className=\"pres\">\r\n                    <b>Hospitlas: HERE Core Map Data.</b><br/><br/>\r\n                    <b>Statistics: Generated test data to show functionality of the platform. </b>\r\n                </p>\r\n               <Container className=\"scroll\">\r\n                   <div className=\"bg-gradient-here-da\" style={{marginTop: \"10px\"}} />\r\n                   \r\n                   {\r\n                       ( \r\n                           this.props.reqFinished == false ? \r\n                            <h4>Loading data ...</h4>\r\n                            \r\n                            : \r\n                            <>\r\n                                <Row >\r\n                                    <Col>\r\n                                        <b>COVID Patients</b>\r\n                                        <div>Total patients: {this.props.stats.covid_patients.total_patients} </div>\r\n                                        <div>Total beds: {this.props.stats.covid_patients.total_beds}</div>\r\n                                        <div style={{color:\"green\"}}>Has free beds: {this.props.stats.covid_patients.has_free_beds} hospitals</div>\r\n                                        <div style={{color:\"red\"}}>Not enough beds in: {this.props.stats.covid_patients.no_free_beds} hospitals</div>\r\n                                        <Button className=\"here-da\" style={{float:\"right\", marginTop: \"5px\"}} onClick={() => this.props.changeLayerSelection(\"show_patients_layer\")}>Show/Hide on the map</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"bg-gradient-here-da\" style={{marginTop: \"10px\"}} />\r\n                                <Row >\r\n                                    <Col>\r\n                                        <b>Artificial lungs ventilation machines </b>\r\n                                        <div>Total machines: {this.props.stats.lungs_ventilation_machines.total_lungs_machines} </div>\r\n                                        <div style={{color:\"red\"}}>Lower 6 machines has:  {this.props.stats.lungs_ventilation_machines.lungs_machines_lower_5} hospitals</div>\r\n                                        <div style={{color:\"orange\"}}>6 - 10 machines has: {this.props.stats.lungs_ventilation_machines.lungs_machines_lower_10} hospitals</div>\r\n                                        <div style={{color:\"green\"}}>Greater then 10 has:  {this.props.stats.lungs_ventilation_machines.lungs_machines_greater_10} hospitals</div>\r\n                                        <Button className=\"here-da\" style={{float:\"right\", marginTop: \"5px\"}} onClick={() => this.props.changeLayerSelection(\"show_machines_layer\")}>Show/Hide on the map</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"bg-gradient-here-da\" style={{marginTop: \"10px\"}} />\r\n                                <Row >\r\n                                    <Col>\r\n                                        <b>Medical Equipment</b>\r\n                                        <div style={{color:\"red\"}}>Criticaly few: {this.props.stats.medical_masks.covirus_masks_few} hospitals</div>\r\n                                        <div style={{color:\"orange\"}}>Enough: {this.props.stats.medical_masks.covirus_masks_enough} hospitals</div>\r\n                                        <div style={{color:\"green\"}}>Can share:  {this.props.stats.medical_masks.covirus_masks_share} hospitals</div>\r\n                                        <Button className=\"here-da\" style={{float:\"right\", marginTop: \"5px\"}} onClick={() => this.props.changeLayerSelection(\"show_equipment_layer\")}>Show/Hide on the map</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"bg-gradient-here-da\" style={{marginTop: \"10px\"}} />\r\n                                <Row >\r\n                                    <Col>\r\n                                        <b>COVID test kits</b>\r\n                                        <div style={{color:\"red\"}}>Criticaly few: {this.props.stats.covid_test_kits.covirus_tests_few} hospitals</div>\r\n                                        <div style={{color:\"orange\"}}>Enough: {this.props.stats.covid_test_kits.covirus_tests_enough} hospitals</div>\r\n                                        <div style={{color:\"green\"}}>Can share: {this.props.stats.covid_test_kits.covirus_tests_share} hospitals</div>\r\n                                        <Button className=\"here-da\" style={{float:\"right\", marginTop: \"5px\"}} onClick={() => this.props.changeLayerSelection(\"show_test_kits_layer\")}>Show/Hide on the map</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"bg-gradient-here-da\" style={{marginTop: \"10px\"}} />\r\n                            </>\r\n                            \r\n                       )\r\n                   }\r\n                   \r\n               </Container>\r\n                \r\n            </div>\r\n            <div id=\"search\">\r\n                <input className=\"form-control\" style={{marginTop:\"5px\"}} placeholder=\"Search\" value={this.props.searchText} onChange={e => { this.props.onChangeSearch(e.currentTarget.value)}} />\r\n                <div id=\"suggestions-list\">\r\n                    {\r\n                        (this.props.suggestions !== undefined ? \r\n                            this.props.suggestions.map((result, i) => {\r\n                                return <div className=\"suggest-item\" key={i}  onClick={() => this.props.geocode(result.locationId)} >{result.label}</div>\r\n                            }) \r\n                            \r\n                            : \r\n                            \r\n                            console.log(\"none\")\r\n                        )\r\n                        \r\n                    }\r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport { Map } from './Map'\nimport { Panel } from './Panel'\n\nimport { apikey } from '../assets/js/apikey'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      waypoints: [],\n      route: [],\n      suggestions:[],\n      searchText:\"\",\n      marker: [],\n      isoline: [],\n      stats: {},\n      show_patients_layer: false,\n      show_machines_layer: false,\n      show_equipment_layer: false,\n      show_test_kits_layer: false,\n      reqFinished: false\n    }\n\n    this.onChangeSearch = this.onChangeSearch.bind(this)\n    this.geocode = this.geocode.bind(this)\n    this.updateWaypoints = this.updateWaypoints.bind(this)\n    this.clearWaypoints = this.clearWaypoints.bind(this)\n    this.calculateRoute = this.calculateRoute.bind(this)\n    \n    this.calculateIsoline = this.calculateIsoline.bind(this)\n    this.clearIsoline = this.clearIsoline.bind(this)\n    this.updateMarker = this.updateMarker.bind(this)\n    this.changeLayerSelection = this.changeLayerSelection.bind(this)\n  }\n\n  componentDidMount () {\n    axios.get(\"https://xyz.api.here.com/hub/spaces/WCHK0sa1/iterate?access_token=AKChCVlEQcC-jEHlFKZMOgA\")\n      .then(res => {\n\n\n          let reducer = (accumulator, currentValue) => accumulator + currentValue\n\n          let patients = []\n          res.data.features.filter(feature => patients.push(feature.properties.covirus_patients))\n          let total_covid_patients = patients.reduce(reducer)  \n\n          let beds = []\n          res.data.features.filter(feature => beds.push(feature.properties.beds))\n          let total_beds = beds.reduce(reducer)\n\n          var has_free_beds = res.data.features.filter(feature => feature.properties.beds > feature.properties.covirus_patients)\n          var no_free_beds = res.data.features.filter(feature => feature.properties.beds < feature.properties.covirus_patients)\n\n          // debugger\n          let lungs_machines = []\n          res.data.features.filter(feature => lungs_machines.push(feature.properties.lungs_ventilation_machines))\n          let total_lungs_machines = lungs_machines.reduce(reducer)\n\n          let lungs_machines_lower_5 = res.data.features.filter(feature => feature.properties.lungs_ventilation_machines < 6)\n          let lungs_machines_lower_10 = res.data.features.filter(feature => feature.properties.lungs_ventilation_machines < 10 && feature.properties.lungs_ventilation_machines > 6)\n          let lungs_machines_greater_10 = res.data.features.filter(feature => feature.properties.lungs_ventilation_machines > 10)\n\n          let covirus_tests_few = res.data.features.filter(feature => feature.properties.covirus_tests === \"сritically few\")\n          let covirus_tests_enough = res.data.features.filter(feature => feature.properties.covirus_tests === \"enough\")\n          let covirus_tests_share = res.data.features.filter(feature => feature.properties.covirus_tests === \"can share\")\n\n          let covirus_masks_few = res.data.features.filter(feature => feature.properties.medical_masks === \"сritically few\")\n          let covirus_masks_enough = res.data.features.filter(feature => feature.properties.medical_masks === \"enough\")\n          let covirus_masks_share = res.data.features.filter(feature => feature.properties.medical_masks === \"can share\")\n\n          let result_json = {\n            covid_patients: {\n              total_patients: total_covid_patients,\n              total_beds: total_beds,\n              has_free_beds: has_free_beds.length,\n              has_free_beds_features: has_free_beds,\n              no_free_beds: no_free_beds.length,\n              no_free_beds_features: no_free_beds\n            },\n            lungs_ventilation_machines: {\n              total_lungs_machines: total_lungs_machines,\n              lungs_machines_lower_5: lungs_machines_lower_5.length,\n              lungs_machines_lower_5_features: lungs_machines_lower_5,\n              lungs_machines_lower_10: lungs_machines_lower_10.length,\n              lungs_machines_lower_10_features: lungs_machines_lower_10,\n              lungs_machines_greater_10: lungs_machines_greater_10.length,\n              lungs_machines_greater_10_features: lungs_machines_greater_10\n            },\n            medical_masks: {\n              covirus_masks_few: covirus_masks_few.length,\n              covirus_masks_few_features: covirus_masks_few,\n              covirus_masks_enough: covirus_masks_enough.length,\n              covirus_masks_enough_features: covirus_masks_enough,\n              covirus_masks_share: covirus_masks_share.length,\n              covirus_masks_share_features: covirus_masks_share\n            },\n            covid_test_kits:{\n              covirus_tests_few: covirus_tests_few.length,\n              covirus_tests_few_features: covirus_tests_few,\n              covirus_tests_enough: covirus_tests_enough.length,\n              covirus_tests_enough_features: covirus_tests_enough,\n              covirus_tests_share: covirus_tests_share.length,\n              covirus_tests_share_features: covirus_tests_share\n            }\n          }\n\n          this.setState({stats: result_json, reqFinished: true})\n          \n      })\n  }\n\n  changeLayerSelection (layer) {\n\n    if (layer === \"show_patients_layer\") {\n      this.setState({\n        show_patients_layer: !this.state.show_patients_layer,\n        show_machines_layer: false,\n        show_equipment_layer: false,\n        show_test_kits_layer: false,\n      })\n    } else if (layer === \"show_machines_layer\") {\n      this.setState({\n        show_machines_layer: !this.state.show_machines_layer,\n        show_patients_layer: false,\n        show_equipment_layer: false,\n        show_test_kits_layer: false,\n      })\n    } else if (layer === \"show_equipment_layer\") {\n      this.setState({\n        show_equipment_layer: !this.state.show_equipment_layer,\n        show_patients_layer: false,\n        show_machines_layer: false,\n        show_test_kits_layer: false,\n      })\n    } else if (layer === \"show_test_kits_layer\") {\n      this.setState({\n        show_test_kits_layer: !this.state.show_test_kits_layer,\n        show_patients_layer: false,\n        show_machines_layer: false,\n        show_equipment_layer: false,\n      })\n    } \n\n  }\n\n  calculateIsoline (coord) {\n    let isolineBaseUrl = \"https://isoline.route.ls.hereapi.com/routing/7.2/calculateisoline.json?\"\n\n    // debugger\n    let isolineRequest = isolineBaseUrl + `apikey=${apikey}&mode=fastest;car&rangetype=time&range=600&start=geo!${coord.lat},${coord.lng}`\n\n    axios.get(isolineRequest)\n      .then(res => {\n        if(res.data.response !== null){\n          this.setState({\"isoline\": [...this.state.isoline, res.data.response.isoline[0].component[0].shape] })\n        }\n        \n      }, error => {\n        console.log(error)\n      })\n\n  }\n\n  updateMarker (coords) {\n    this.setState({ marker: [...this.state.marker, coords] })\n  }\n\n  clearIsoline () {\n    this.setState({ \n        isoline: [], \n        marker: [], \n    })\n  }\n\n  geocode (locationId) {\n    let baseUrl = \"https://geocoder.ls.hereapi.com/6.2/geocode.json\"\n    let geocoderUrl = baseUrl + `?locationid=${locationId}&apikey=${apikey}`\n    axios.get(geocoderUrl).then(res => {\n      // debugger\n      let lat = res.data.Response.View[0].Result[0].Location.DisplayPosition.Latitude\n      let lng = res.data.Response.View[0].Result[0].Location.DisplayPosition.Longitude\n      // debugger\n      window.map.setCenter({lat:lat,lng:lng})\n      window.map.setZoom(18)\n\n      this.setState({searchText: \"\", geocoderResults: [], suggestions:[]})\n      // console.log(res.data)\n    })\n  }\n\n  onChangeSearch(searchText){\n    this.setState({searchText: searchText})\n\n    let baseUrl = \"https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json\"\n    let geoUrl = baseUrl + `?query=${searchText}` + `&apikey=${apikey}` + \"&maxresults=10\"\n    \n    axios.get(geoUrl).then(res => {\n     \n      this.setState({suggestions: res.data.suggestions})\n    })\n    \n  }\n\n  calculateRoute () {\n    let waypointBaseUrl = \"https://wse.ls.hereapi.com/2/findsequence.json?\"\n    let routeBaseUrl = \"https://route.ls.hereapi.com/routing/7.2/calculateroute.json?\"\n    \n    let waypointsToString = this.state.waypoints.map( (coords, i) => {\n\n      if (i === 0) {\n        return `start=${i};${coords.lat},${coords.lng}`\n      } else if (i === this.state.waypoints.length -1) {\n        return `end=${i};${coords.lat},${coords.lng}`\n      } else {\n        return `destination${i}=${i};${coords.lat},${coords.lng}`\n      }\n    }).join(\"&\")\n\n    let waypointsRequest = waypointBaseUrl + `apikey=${apikey}&&mode=fastest;car&` + waypointsToString\n\n    axios.get(waypointsRequest)\n      .then(res => {\n        \n        let routeToString = res.data.results[0].waypoints.map( (point, i) => {\n          return `waypoint${i}=geo!${point.lat},${point.lng}`\n        }).join(\"&\")\n\n        let routeRequest = routeBaseUrl + `apikey=${apikey}&&mode=fastest;car;traffic:enabled&routeattributes=sh&` + routeToString\n        \n        axios.get(routeRequest)\n          .then(routeRes => {\n            let polylineArray = routeRes.data.response.route[0].shape.map((coords, i) => {\n              return coords.split(',').map(Number);\n            })\n            this.setState({route: polylineArray})\n          })\n      }, error => {\n        console.log(error)\n      })\n\n  }\n\n  updateWaypoints (waypoint) {\n    this.setState({ waypoints: [...this.state.waypoints, waypoint] })\n  }\n\n  clearWaypoints () {\n    this.setState({ waypoints: [], route: []})\n  }\n\n  render () {\n    return (\n      <>\n        <Map \n\n          show_patients_layer={this.state.show_patients_layer}\n          show_machines_layer={this.state.show_machines_layer}\n          show_equipment_layer={this.state.show_equipment_layer}\n          show_test_kits_layer={this.state.show_test_kits_layer}\n          reqFinished={this.state.reqFinished}\n          stats={this.state.stats}\n          updateWaypoints={ this.updateWaypoints } \n          waypoints={ this.state.waypoints }  \n          route={ this.state.route }\n          clearWaypoints={ this.clearWaypoints }\n          calculateRoute={this.calculateRoute}\n          \n          updateMarker={this.updateMarker} \n          calculateIsoline={this.calculateIsoline}\n          clearIsoline={ this.clearIsoline } \n          isoline={this.state.isoline} \n          marker={this.state.marker}\n          />\n        \n        <Panel \n          changeLayerSelection={this.changeLayerSelection}\n          reqFinished={this.state.reqFinished}\n          stats={this.state.stats}\n          clearWaypoints={ this.clearWaypoints } \n          waypoints={ this.state.waypoints } \n          calculateRoute={this.calculateRoute}\n          onChangeSearch={this.onChangeSearch}\n          geocode={this.geocode}\n          suggestions={this.state.suggestions}/>\n      </>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nimport './assets/css/index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}